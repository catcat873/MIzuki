---
import { getCollection } from "astro:content";
import { Icon } from "astro-icon/components";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import MainGridLayout from "../layouts/MainGridLayout.astro";

// 从 memories 集合加载数据，合并为日记格式
const allMemories = (await getCollection("memories")) as any[];
const sorted = allMemories
	.filter((m: any) => !m.data.draft)
	.sort(
		(a: any, b: any) => b.data.published.getTime() - a.data.published.getTime(),
	);

type Moment = {
	id: string;
	content: string;
	date: string;
	images?: string[];
	title?: string;
	tags?: string[];
	mood?: string;
	weather?: string;
	location?: string;
	featured?: boolean;
};
const moments: Moment[] = sorted.map((m: any) => ({
	id: m.slug,
	content: m.data.description || m.data.title,
	date: m.data.published.toISOString(),
	images: m.data.image ? [m.data.image] : [],
	title: m.data.title,
	tags: m.data.tags || [],
	mood: m.data.mood || "",
	weather: m.data.weather || "",
	location: m.data.location || "",
	featured: !!m.data.featured,
}));

// 年度时间线汇总
const yearGroups = moments.reduce(
	(acc: Record<string, number>, item) => {
		const y = new Date(item.date).getFullYear().toString();
		acc[y] = (acc[y] || 0) + 1;
		return acc;
	},
	{} as Record<string, number>,
);
const years = Object.keys(yearGroups).sort((a, b) => Number(b) - Number(a));

// 时间格式化函数
function formatTime(dateString: string): string {
	const now = new Date();
	const date = new Date(dateString);
	const diffInMinutes = Math.floor(
		(now.getTime() - date.getTime()) / (1000 * 60),
	);

	if (diffInMinutes < 60) {
		return `${diffInMinutes}${i18n(I18nKey.diaryMinutesAgo)}`;
	}
	if (diffInMinutes < 1440) {
		// 24小时
		const hours = Math.floor(diffInMinutes / 60);
		return `${hours}${i18n(I18nKey.diaryHoursAgo)}`;
	}
	const days = Math.floor(diffInMinutes / 1440);
	return `${days}${i18n(I18nKey.diaryDaysAgo)}`;
}
---

<MainGridLayout title={i18n(I18nKey.diary)} description="即刻短文">
	<div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
		<div class="card-base z-10 px-4 py-4 md:px-6 md:py-5 relative w-full">
			<div class="relative max-w-4xl">
				<!-- 页面头部 -->
				<div class="moments-header mb-6">
					<div class="header-content">
						<div class="header-info">
							<h1 class="moments-title text-xl md:text-2xl lg:text-3xl font-bold text-90 mb-1">{i18n(I18nKey.diary)} / 岁月浅吟</h1>
							<p class="moments-subtitle text-sm md:text-base lg:text-lg text-75">合并展示日常记录与岁月浅吟</p>
						</div>
						<div class="header-stats">
							<div class="stat-item text-center">
								<span class="stat-number text-lg md:text-xl lg:text-2xl font-bold text-[var(--primary)]">{moments.length}</span>
								<span class="stat-label text-xs md:text-sm lg:text-base text-75">{i18n(I18nKey.diaryCount)}</span>
							</div>
						</div>
					</div>
				</div>

				<!-- 年度时间线导航 -->
				{years.length > 0 && (
					<div class="year-timeline flex flex-wrap gap-2 mb-6">
						{years.map((y) => (
							<a href={`#year-${y}`} class="year-pill inline-flex items-center gap-2 px-3 py-1 rounded-full bg-white/10 border border-white/15 hover:bg-white/15 transition">
								<span class="font-semibold">{y}</span>
								<span class="text-xs opacity-75">{yearGroups[y]}</span>
							</a>
						))}
					</div>
				)}

				<!-- 短文列表 -->
				<div class="moments-timeline">
					<div class="timeline-list space-y-4">
					{moments.map(moment => (
						<div class="moment-item card-base p-4 md:p-6 lg:p-8 hover:shadow-lg transition-all">
								<div class="moment-content">
									{moment.title && (
										<h3 id={`year-${new Date(moment.date).getFullYear()}`} class="font-semibold mb-2 text-90 flex items-center gap-2">
											{moment.featured && <span class="inline-flex items-center px-2 py-0.5 rounded bg-[var(--primary)]/15 text-[var(--primary)] text-xs">精选</span>}
											{moment.title}
										</h3>
									)}

									<!-- 元信息：心情 / 天气 / 地点 / 标签 -->
									{(moment.mood || moment.weather || moment.location || (moment.tags && moment.tags.length)) && (
										<div class="moment-meta flex flex-wrap items-center gap-2 mb-3 text-xs md:text-sm text-75">
											{moment.mood && (
												<span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-white/10 border border-white/15">
													<Icon name="material-symbols:mood" class="text-[var(--primary)] text-sm" />
													{moment.mood}
												</span>
											)}
											{moment.weather && (
												<span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-white/10 border border-white/15">
													<Icon name="material-symbols:wb-sunny" class="text-[var(--primary)] text-sm" />
													{moment.weather}
												</span>
											)}
											{moment.location && (
												<span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-white/10 border border-white/15">
													<Icon name="material-symbols:location-on" class="text-[var(--primary)] text-sm" />
													{moment.location}
												</span>
											)}
											{moment.tags && moment.tags.length > 0 && (
												<span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-white/10 border border-white/15">
													<Icon name="material-symbols:tag" class="text-[var(--primary)] text-sm" />
													{moment.tags.join(" · ")}
												</span>
											)}
										</div>
									)}

									<p class="moment-text text-sm md:text-base lg:text-lg text-90 leading-relaxed mb-3 md:mb-4">{moment.content}</p>
									
									{moment.images && moment.images.length > 0 && (
							<div class="moment-images grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 md:gap-3 lg:gap-4 mb-3 md:mb-4">
								{moment.images.map((image, index) => (
								<div class="image-item relative rounded-md overflow-hidden aspect-square cursor-pointer hover:scale-105 transition-transform">
									<img 
										src={image} 
										alt={i18n(I18nKey.diaryImage)}
										class="w-full h-full object-cover"
										loading="lazy"
									/>
								</div>
								))}
							</div>
							)}
								</div>
								
								<hr class="moment-divider border-t border-[var(--line-divider)] my-3 md:my-4" />
								
								<div class="moment-footer flex justify-between items-center">
									<div class="moment-time flex items-center gap-1.5 text-75 text-xs md:text-sm lg:text-base">
										<i class="time-icon text-xs md:text-sm">🕐</i>
										<time datetime={moment.date}>
											{formatTime(moment.date)}
										</time>
									</div>
									
								</div>
							</div>
						))}
					</div>
				</div>
			</div>
		</div>
	</div>
</MainGridLayout>

<style>
	.card-base {
		background: var(--card-bg);
		border: 1px solid var(--line-divider);
		transition: all 0.3s ease;
	}
	.moment-meta span { backdrop-filter: blur(4px); }
</style>


